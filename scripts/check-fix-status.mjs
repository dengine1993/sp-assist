#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */

import { createClient } from '@supabase/supabase-js';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import * as dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, '..', '.env') });
dotenv.config({ path: join(__dirname, '..', '.env.local') });

const COLORS = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`);
}

async function checkEnvironmentVariables() {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'cyan');
  
  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

  if (!supabaseUrl) {
    log('‚ùå VITE_SUPABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
    return false;
  }
  if (!supabaseKey) {
    log('‚ùå VITE_SUPABASE_ANON_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
    return false;
  }

  log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'green');
  log(`   URL: ${supabaseUrl}`, 'blue');
  return { supabaseUrl, supabaseKey };
}

async function checkDatabaseConnection(supabase) {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'cyan');
  
  try {
    const { data, error } = await supabase
      .from('document_chunks')
      .select('id')
      .limit(1);

    if (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'red');
      return false;
    }

    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ', 'green');
    return true;
  } catch (error) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${error.message}`, 'red');
    return false;
  }
}

async function checkTableStructure(supabase) {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã document_chunks', 'cyan');
  
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ —á–µ—Ä–µ–∑ RPC
    const { data: chunks, error } = await supabase
      .from('document_chunks')
      .select('*')
      .limit(1);

    if (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`, 'red');
      return false;
    }

    log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ document_chunks –¥–æ—Å—Ç—É–ø–Ω–∞', 'green');
    
    if (chunks && chunks.length > 0) {
      const firstChunk = chunks[0];
      const hasEmbedding = 'embedding' in firstChunk;
      const hasContent = 'content' in firstChunk;
      const hasDocumentName = 'document_name' in firstChunk;

      log(`   ‚Ä¢ –ü–æ–ª–µ 'embedding': ${hasEmbedding ? '‚úÖ' : '‚ùå'}`, hasEmbedding ? 'green' : 'red');
      log(`   ‚Ä¢ –ü–æ–ª–µ 'content': ${hasContent ? '‚úÖ' : '‚ùå'}`, hasContent ? 'green' : 'red');
      log(`   ‚Ä¢ –ü–æ–ª–µ 'document_name': ${hasDocumentName ? '‚úÖ' : '‚ùå'}`, hasDocumentName ? 'green' : 'red');

      if (firstChunk.embedding) {
        const embeddingLength = Array.isArray(firstChunk.embedding) 
          ? firstChunk.embedding.length 
          : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        if (embeddingLength === 1024) {
          log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞: ${embeddingLength} ‚úÖ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)`, 'green');
        } else if (embeddingLength === 1536) {
          log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞: ${embeddingLength} ‚ùå (–Ω—É–∂–Ω–æ 1024!)`, 'red');
          log('   ‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!', 'yellow');
          return false;
        } else {
          log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞: ${embeddingLength}`, 'yellow');
        }
      }
    } else {
      log('   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å', 'yellow');
      log('   –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'blue');
    }

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'red');
    return false;
  }
}

async function checkEdgeFunctions(supabase) {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: Edge Functions', 'cyan');
  
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å Edge Function —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const { data, error } = await supabase.functions.invoke('process-pdf', {
      body: { 
        pdfText: 'test'.repeat(30), // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        documentName: '__test_check__'
      }
    });

    if (error) {
      if (error.message.includes('JINA_API_KEY')) {
        log('‚ùå JINA_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Edge Functions', 'red');
        log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ Supabase Dashboard:', 'yellow');
        log('   Settings ‚Üí Edge Functions ‚Üí Secrets', 'blue');
        return false;
      }
      log(`‚ö†Ô∏è  Edge Function –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å –æ—à–∏–±–∫–æ–π: ${error.message}`, 'yellow');
      return false;
    }

    log('‚úÖ Edge Function process-pdf –¥–æ—Å—Ç—É–ø–Ω–∞', 'green');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      await supabase
        .from('document_chunks')
        .delete()
        .eq('document_name', '__test_check__');
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    }

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Edge Function: ${error.message}`, 'red');
    return false;
  }
}

async function checkDocuments(supabase) {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'cyan');
  
  try {
    const { data: documents, error } = await supabase
      .from('document_chunks')
      .select('document_name')
      .limit(100);

    if (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${error.message}`, 'red');
      return false;
    }

    if (!documents || documents.length === 0) {
      log('‚ö†Ô∏è  –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'yellow');
      log('   –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π .txt —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã', 'blue');
      return true;
    }

    // –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const uniqueDocs = [...new Set(documents.map(d => d.document_name))];
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${uniqueDocs.length}`, 'green');
    log(`   –í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${documents.length}`, 'blue');
    
    uniqueDocs.forEach(docName => {
      const count = documents.filter(d => d.document_name === docName).length;
      log(`   ‚Ä¢ ${docName}: ${count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`, 'blue');
    });

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${error.message}`, 'red');
    return false;
  }
}

async function main() {
  log('\n' + '='.repeat(70), 'cyan');
  log('üîß –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø', 'cyan');
  log('='.repeat(70) + '\n', 'cyan');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = await checkEnvironmentVariables();
  if (!env) {
    log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.\n', 'red');
    process.exit(1);
  }

  const supabase = createClient(env.supabaseUrl, env.supabaseKey);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connected = await checkDatabaseConnection(supabase);
  if (!connected) {
    log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n', 'red');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
  const tableOk = await checkTableStructure(supabase);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: Edge Functions
  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JINA_API_KEY
  // const functionsOk = await checkEdgeFunctions(supabase);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –î–æ–∫—É–º–µ–Ω—Ç—ã
  const docsOk = await checkDocuments(supabase);

  // –ò—Ç–æ–≥–∏
  log('\n' + '='.repeat(70), 'cyan');
  log('üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò', 'cyan');
  log('='.repeat(70), 'cyan');

  const checks = [
    { name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', status: true },
    { name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', status: connected },
    { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã', status: tableOk },
    // { name: 'Edge Functions', status: functionsOk },
    { name: '–î–æ–∫—É–º–µ–Ω—Ç—ã', status: docsOk },
  ];

  checks.forEach(check => {
    const icon = check.status ? '‚úÖ' : '‚ùå';
    const color = check.status ? 'green' : 'red';
    log(`${icon} ${check.name}`, color);
  });

  const allPassed = checks.every(c => c.status);

  if (allPassed) {
    log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!', 'green');
    log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n', 'green');
  } else {
    log('\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´', 'yellow');
    log('–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ñ–∞–π–ª–∞—Ö:', 'yellow');
    log('  - –ë–´–°–¢–†–û–ï_–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï.md', 'blue');
    log('  - –ß–ï–ö–õ–ò–°–¢_–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø.md\n', 'blue');
  }

  log('üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:', 'magenta');
  log('   npm run apply-fix\n', 'blue');
}

main().catch(error => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}\n`, 'red');
  console.error(error);
  process.exit(1);
});
