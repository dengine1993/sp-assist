#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –°–ü 60.13330.2020 –∏–∑ TXT —Ñ–∞–π–ª–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ PDF –≤ TXT –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ public/sp-60-13330-2020.txt
 * 2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç VITE_SUPABASE_URL –∏ VITE_SUPABASE_PUBLISHABLE_KEY
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/load-sp-from-txt.mjs
 */

import { readFileSync, existsSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_KEY = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;
const TXT_PATH = join(__dirname, '..', 'public', 'sp-60-13330-2020.txt');
const DOCUMENT_NAME = 'sp-60-13330-2020';

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: VITE_SUPABASE_URL –∏ VITE_SUPABASE_PUBLISHABLE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

if (!existsSync(TXT_PATH)) {
  console.error(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª ${TXT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  console.error('   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ PDF –≤ TXT –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ public/sp-60-13330-2020.txt');
  process.exit(1);
}

async function uploadToSupabase(text, documentName) {
  console.log(`üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "${documentName}" –≤ Supabase...`);
  console.log(`   –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
  
  try {
    const response = await fetch(
      `${SUPABASE_URL}/functions/v1/process-pdf`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_KEY}`,
        },
        body: JSON.stringify({
          pdfText: text,
          documentName: documentName,
        }),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!`);
    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${result.chunksProcessed}`);
    console.log(`   üìù –î–æ–∫—É–º–µ–Ω—Ç: ${result.documentName}`);
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Supabase:', error);
    throw error;
  }
}

async function main() {
  console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –°–ü 60.13330.2020 –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n');
  console.log(`   Supabase URL: ${SUPABASE_URL}`);
  console.log(`   TXT —Ñ–∞–π–ª: ${TXT_PATH}\n`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
    console.log('üìÑ –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞...');
    const text = readFileSync(TXT_PATH, 'utf-8');
    console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${text.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
    await uploadToSupabase(text, DOCUMENT_NAME);
    
    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω.');
    console.log('   –¢–µ–ø–µ—Ä—å DeepSeek –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.');
  } catch (error) {
    console.error('\n‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

main();

