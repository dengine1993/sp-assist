#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –°–ü 60.13330.2020 –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install
 * 2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/load-sp-document.mjs
 */

import * as pdfjsLib from 'pdfjs-dist';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º worker –¥–ª—è pdf.js
const pdfjsWorker = await import('pdfjs-dist/build/pdf.worker.mjs');
pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_KEY = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;
const PDF_PATH = join(__dirname, '..', 'public', 'sp-60-13330-2020.pdf');
const DOCUMENT_NAME = 'sp-60-13330-2020';

if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: VITE_SUPABASE_URL –∏ VITE_SUPABASE_PUBLISHABLE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

async function extractTextFromPDF(pdfPath) {
  console.log(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ ${pdfPath}...`);
  
  try {
    const data = new Uint8Array(readFileSync(pdfPath));
    const pdf = await pdfjsLib.getDocument({ data }).promise;
    
    console.log(`üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pdf.numPages}`);
    
    let fullText = '';
    
    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const textContent = await page.getTextContent();
      const pageText = textContent.items.map(item => item.str).join(' ');
      fullText += pageText + '\n\n';
      
      if (i % 10 === 0) {
        console.log(`  ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${i}/${pdf.numPages}`);
      }
    }
    
    console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${fullText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    return fullText;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF:', error);
    throw error;
  }
}

async function uploadToSupabase(text, documentName) {
  console.log(`\nüöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "${documentName}" –≤ Supabase...`);
  
  try {
    const response = await fetch(
      `${SUPABASE_URL}/functions/v1/process-pdf`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_KEY}`,
        },
        body: JSON.stringify({
          pdfText: text,
          documentName: documentName,
        }),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!`);
    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${result.chunksProcessed}`);
    console.log(`   üìù –î–æ–∫—É–º–µ–Ω—Ç: ${result.documentName}`);
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Supabase:', error);
    throw error;
  }
}

async function main() {
  console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –°–ü 60.13330.2020 –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n');
  console.log(`   Supabase URL: ${SUPABASE_URL}`);
  console.log(`   PDF —Ñ–∞–π–ª: ${PDF_PATH}\n`);
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
    const text = await extractTextFromPDF(PDF_PATH);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
    await uploadToSupabase(text, DOCUMENT_NAME);
    
    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω.');
    console.log('   –¢–µ–ø–µ—Ä—å DeepSeek –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.');
  } catch (error) {
    console.error('\n‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

main();

